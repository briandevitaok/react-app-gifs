{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","console","log","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACQ,sBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMd,SACA,uBACAO,KAAO,OACPC,MAAST,EACTU,SApBkB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAWH,GAD9C,gEAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,OADAC,QAAQC,IAAIL,GACL,CACHM,GAAGH,EAAIG,GACPC,MAAMJ,EAAII,MACVZ,IAAG,UAACQ,EAAIK,cAAL,aAAC,EAAYC,iBAAiBd,QATtB,kBAabM,GAba,4CAAH,sDCDPS,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOZ,EAAS,EAATA,IAEpC,OACI,sBAAKgB,UAAU,yCAAf,UACG,qBAAKC,IAAKjB,EAAKkB,IAAKN,IACpB,4BAAIA,QCFDO,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAGtB,ECDwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAnBCC,qBAAU,WACR1B,EAAQC,GACF0B,MAAK,SAAAhB,GAEFiB,YAAW,WACPhB,QAAQC,IAAIF,GACZc,EAAS,CACLjB,KAAKG,EACLY,SAAQ,MAGd,UAIV,CAACtB,IAIEuB,EDxBwBK,CAAa5B,GAAhCe,EAAZ,EAAOR,KAAae,EAApB,EAAoBA,QASpB,OAEI,qCACA,oBAAIJ,UAAU,mCAAd,SAAkDlB,IAEjDsB,GAAW,mBAAGJ,UAAU,mCAAb,2BACZ,qBAAKA,UAAU,YAAf,SAGIH,EAAON,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIG,aEvBZgB,EAAe,WAGxB,MAAoC3C,mBAAW,CAAC,cAAhD,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACE,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI6C,EAAWrB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCZlB+B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0423b45a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react/cjs/react.development'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const hendleInputChange = (e) => {\r\n        //inputValue tiene lo que el usuario pone, setInputValue actualiza el estado\r\n        setInputValue(e.target.value); // e, tiene adentro el target y dentro de  target el value\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //Evita que el navegador se refresque\r\n        if(inputValue.trim().length > 2) { //El trim quita los espacios\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        } //Si lo que el usuario pone (inputValue) es mayor en logitud a 2\r\n        //Entonces setCategories va a aniadir un nuevo elemento en el principio ya que con el ...cats obtiene primero la lista y luego agregar lo que el usuario pone\r\n        \r\n    }   \r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n            <input\r\n            type = \"text\"\r\n            value = {inputValue}\r\n            onChange={hendleInputChange }\r\n            />\r\n            </form>\r\n       \r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {   //Proptypes condiciona que una cosa es requerido\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async (category) => {\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category)} &limit=10&api_key=C5pTxfz2lsMKy5h6MpDQAUZpep75LdYj`;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n    const gifs = data.map(img => {\r\n        console.log(data)\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n \r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    // console.log(id, title, url)\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const  GifGrid = ({category}) => {\r\n\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n \r\n\r\n   \r\n\r\n    \r\n//Cada vez que nosotros damos click en el boton react ejecuta nuevamente todo el bloque de codigo para actualziar el state\r\n\r\n    return (\r\n\r\n        <>\r\n        <h3 className=\"animate__animated animate_fadeIn\">{category}</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Cargando gifs</p>}\r\n        <div className=\"card-grid\">\r\n           \r\n        {\r\n            images.map(img => (\r\n                <GifGridItem\r\n                key={img.id}\r\n                {...img}/>\r\n            ))\r\n        }\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport { useEffect } from \"react/cjs/react.development\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\n//Aca hacemos la peticion http a la api\r\nexport const useFetchGifs = (category) =>{\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading:true\r\n    });\r\n\r\n     useEffect(() => { \r\n       getGifs(category)\r\n            .then(img =>{\r\n                \r\n                setTimeout(() =>{\r\n                    console.log(img)\r\n                    setstate({\r\n                        data:img,\r\n                        loading:false\r\n                       \r\n                    });\r\n                },3000);\r\n               \r\n            })\r\n\r\n     }, [category])\r\n\r\n\r\n    \r\n    return state //Retorna el state que es {data:[], loading:true};\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState  (['One Punch'])\r\n\r\n    // const handleAdd = () => {\r\n    //   setCategories([...categories, 'Anibal']); // Esta es una forma de agregar un elemento a la lista\r\n    //   setCategories(cats =>[...cats, 'Nuevo elemento']) //Esta es otra forma de agregar un elemento a la lista\r\n    // }\r\n\r\n    return (\r\n      <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <hr/>\r\n      <ol>\r\n        { \r\n          categories.map(category => \r\n             <GifGrid \r\n             key={category}\r\n             category={category}\r\n             />\r\n          )\r\n        }\r\n\r\n      </ol>\r\n\r\n      </>\r\n          )\r\n      \r\n  }\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\n\n\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}